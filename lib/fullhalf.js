"use strict";
/**
 * Created by user on 2017/12/8/008.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const deepmerge = require("deepmerge");
const util = require("./util");
var FullHalfCore;
(function (FullHalfCore) {
    FullHalfCore.FULL_WIDTH = 1;
    FullHalfCore.HALF_WIDTH = 0;
    FullHalfCore.NO_EXIST = -1;
    /**
     * @see https://en.wikipedia.org/wiki/Code_page_437
     */
    let _table = {
        default: {
            from: 0x0020 + 1,
            to: 0x007F - 1,
            values: [0x0020],
        },
        number: [0x0030, 0x0039],
        'A-Z': [0x0041, 0x005A],
        'a-z': [0x0061, 0x007A],
        space: [0x0020],
        slash: {
            values: util.charCodeAt(`/\\`),
        },
        bracket: {
            values: util.charCodeAt(`()[]{}`),
        },
    };
    FullHalfCore.tableDefaultInclude = [
        'number',
        'A-Z',
        'a-z',
        'space',
        'not_default',
    ];
    FullHalfCore.table = [];
    {
        let _keys = FullHalfCore.tableDefaultInclude.slice(0, -1);
        FullHalfCore.table[0] = {};
        FullHalfCore.table[1] = {};
        for (let k in _table) {
            let v = _table[k];
            let r;
            r = fn(v);
            if (r) {
                FullHalfCore.table[FullHalfCore.HALF_WIDTH][k] = r[1];
                FullHalfCore.table[FullHalfCore.FULL_WIDTH][k] = r[0];
            }
        }
        let r = fn(_table.default);
        r[0].not = [];
        r[1].not = [];
        for (let k of _keys) {
            let v = _table[k];
            let r2;
            r2 = fn(v);
            if (r2) {
                r[0].not.push(r2[0]);
                r[1].not.push(r2[1]);
            }
        }
        FullHalfCore.table[FullHalfCore.HALF_WIDTH]['not_default'] = r[1];
        FullHalfCore.table[FullHalfCore.FULL_WIDTH]['not_default'] = r[0];
        //console.log(table);
        function fn(v) {
            let r = [];
            r[0] = {};
            r[1] = {};
            let _skip = true;
            if (Array.isArray(v)) {
                if (v.length == 2) {
                    r[0].from = v[0];
                    r[0].to = v[1];
                }
                else {
                    r[0].values = v;
                }
                _skip = false;
            }
            if (v.from && v.to) {
                r[0].from = v.from;
                r[0].to = v.to;
                _skip = false;
            }
            if (Array.isArray(v.values) && v.values.length) {
                r[0].values = v.values;
                _skip = false;
            }
            if (_skip) {
                return;
            }
            if (r[0].from && r[0].to) {
                r[1].from = toFullWidth(r[0].from);
                r[1].to = toFullWidth(r[0].to);
            }
            if (r[0].values) {
                r[1].values = r[0].values.reduce(function (a, code) {
                    a.push(toFullWidth(code));
                    return a;
                }, []);
            }
            return r;
        }
    }
    function filterTable(data) {
        let _a = [];
        if (data.from && data.to) {
            for (let i = data.from; i <= data.to; i++) {
                _a.push(i);
            }
        }
        if (data.values) {
            _a = _a.concat(data.values);
        }
        if (Array.isArray(data.not) && data.not.length) {
            _a = _a.filter(function (charCode) {
                for (let d of data.not) {
                    if (_chkType(charCode, d)) {
                        return false;
                    }
                }
                return true;
            });
        }
        return _a;
    }
    FullHalfCore.filterTable = filterTable;
    function _chkType(charCode, data) {
        if (data.from && data.to && data.from <= charCode && charCode <= data.to) {
            return true;
        }
        else if (data.values && data.values.includes(charCode)) {
            return true;
        }
    }
    FullHalfCore._chkType = _chkType;
    function chkType(charCode, key, type) {
        let data = FullHalfCore.table[type][key];
        //console.log(charCode, data);
        if (Array.isArray(data.not) && data.not.length) {
            for (let d of data.not) {
                if (_chkType(charCode, d)) {
                    return false;
                }
            }
        }
        if (_chkType(charCode, data)) {
            return true;
        }
    }
    FullHalfCore.chkType = chkType;
    function hasFullHalf(charCode) {
        if (0x0020 <= charCode && charCode < 0x007F) {
            return FullHalfCore.HALF_WIDTH;
        }
        if (0x3000 === charCode || 0xFF00 < charCode && charCode < 0xFF5F) {
            return FullHalfCore.FULL_WIDTH;
        }
        return FullHalfCore.NO_EXIST;
    }
    FullHalfCore.hasFullHalf = hasFullHalf;
    function isFullHalf(charCode) {
        let r = hasFullHalf(charCode);
        if (r === FullHalfCore.FULL_WIDTH) {
            return true;
        }
        else if (r === FullHalfCore.HALF_WIDTH) {
            return false;
        }
        else {
            // @todo add more...
        }
        return null;
    }
    FullHalfCore.isFullHalf = isFullHalf;
    function toFullWidth(charCode) {
        if (0x0020 < charCode && charCode < 0x007F) {
            return 0xFF00 + (charCode - 0x0020);
        }
        if (0x0020 === charCode) {
            return 0x3000;
        }
        return charCode;
    }
    FullHalfCore.toFullWidth = toFullWidth;
    function toHalfWidth(charCode) {
        if (0xFF00 < charCode && charCode < 0xFF5F) {
            return 0x0020 + (charCode - 0xFF00);
        }
        if (0x3000 === charCode) {
            return 0x0020;
        }
        return charCode;
    }
    FullHalfCore.toHalfWidth = toHalfWidth;
    function _optionsType(data) {
        if (data) {
            if (typeof data.exists == 'boolean') {
                for (let key in FullHalfCore.table[0]) {
                    if (key.indexOf('default') == 0) {
                        continue;
                    }
                    if (data[key] !== false) {
                        data[key] = data.exists;
                    }
                }
                delete data.exists;
            }
            else {
                if (typeof data.default == 'boolean') {
                    for (let key of FullHalfCore.tableDefaultInclude) {
                        if (data[key] !== false) {
                            data[key] = data.default;
                        }
                    }
                    delete data.default;
                }
                if (typeof data.not_default2 == 'boolean') {
                    data.both = data.space = data.not_default2;
                    delete data.not_default2;
                }
                if (typeof data.both == 'boolean') {
                    data.number = data.eng = data.both;
                    delete data.both;
                }
                if (typeof data.eng == 'boolean') {
                    data['a-z'] = data['A-Z'] = data.eng;
                    delete data.eng;
                }
            }
        }
        return data;
    }
    FullHalfCore._optionsType = _optionsType;
    function process(str, charProcess, options) {
        let ret = [];
        options.skip = _optionsType(options.skip);
        options.only = _optionsType(options.only);
        //console.log(options);
        let _str = Array.isArray(str) ? str : str.toString();
        for (let char of _str) {
            let _skip;
            // @ts-ignore
            let charCode = typeof char == 'number' ? char : char.charCodeAt();
            if (options.only) {
                _skip = true;
                for (let key in options.only) {
                    //console.log(char, charCode, [key], chkType(charCode, key, options.type));
                    if (options.only[key] && chkType(charCode, key, options.type)) {
                        _skip = false;
                        break;
                    }
                }
                //console.log(char, charCode, _skip);
            }
            if (!_skip && options.skip) {
                for (let key in options.skip) {
                    if (options.skip[key] && chkType(charCode, key, options.type)) {
                        _skip = true;
                        break;
                    }
                }
            }
            if (_skip) {
                ret.push(charCode);
                continue;
            }
            ret.push(charProcess(charCode));
        }
        if (options.returnType) {
            return ret;
        }
        return String.fromCharCode.apply(String, ret);
    }
    FullHalfCore.process = process;
    function factory(charProcessor, type, overwriteOptions) {
        //const deepmerge = require('deepmerge');
        return (str, options) => {
            options = deepmerge.all([
                {
                //skip: {},
                }, options || {}, overwriteOptions || {}, {
                    type: type,
                },
            ]);
            //console.log(options);
            return process(str, charProcessor, options);
        };
    }
    FullHalfCore.factory = factory;
})(FullHalfCore = exports.FullHalfCore || (exports.FullHalfCore = {}));
let typeOnly = {
    only: {
        number: true,
    },
};
exports.toFullNumber = FullHalfCore.factory(FullHalfCore.toFullWidth, FullHalfCore.FULL_WIDTH, typeOnly);
exports.toHalfNumber = FullHalfCore.factory(FullHalfCore.toHalfWidth, FullHalfCore.HALF_WIDTH, typeOnly);
typeOnly = {
    only: {
        eng: true,
    },
};
exports.toFullEnglish = FullHalfCore.factory(FullHalfCore.toFullWidth, FullHalfCore.FULL_WIDTH, typeOnly);
exports.toHalfEnglish = FullHalfCore.factory(FullHalfCore.toHalfWidth, FullHalfCore.HALF_WIDTH, typeOnly);
typeOnly = {
    only: {
        default: true,
    },
};
exports.toFullWidth = FullHalfCore.factory(FullHalfCore.toFullWidth, FullHalfCore.FULL_WIDTH, typeOnly);
exports.toHalfWidth = FullHalfCore.factory(FullHalfCore.toHalfWidth, FullHalfCore.HALF_WIDTH, typeOnly);
const self = require("./fullhalf");
exports.default = self;
//console.log(toFullEnglish('123abcABCＡＢＣ１２３／＊－＋＝－０］［’；／．+-*/=-09][\'";/.'));
//console.log(toHalfEnglish('123abcABCＡＢＣ１２３／＊－＋＝－０］［’；／．+-*/=-09][\'";/.'));
//console.log(toFullNumber('123abcABCＡＢＣ１２３／＊－＋＝－０］［’；／．+-*/=-09][\'";/.'));
//console.log(toHalfNumber('123abcABCＡＢＣ１２３／＊－＋＝－０］［’；／．+-*/=-09][\'";/.'));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnVsbGhhbGYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJmdWxsaGFsZi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgsdUNBQXVDO0FBQ3ZDLCtCQUErQjtBQUUvQixJQUFpQixZQUFZLENBdWY1QjtBQXZmRCxXQUFpQixZQUFZO0lBRWYsdUJBQVUsR0FBRyxDQUFDLENBQUM7SUFDZix1QkFBVSxHQUFHLENBQUMsQ0FBQztJQUVmLHFCQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFrRTNCOztPQUVHO0lBQ0gsSUFBSSxNQUFNLEdBQUc7UUFDWixPQUFPLEVBQUU7WUFDUixJQUFJLEVBQUUsTUFBTSxHQUFHLENBQUM7WUFDaEIsRUFBRSxFQUFFLE1BQU0sR0FBRyxDQUFDO1lBQ2QsTUFBTSxFQUFFLENBQUMsTUFBTSxDQUFDO1NBQ2hCO1FBRUQsTUFBTSxFQUFFLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztRQUV4QixLQUFLLEVBQUUsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDO1FBQ3ZCLEtBQUssRUFBRSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUM7UUFFdkIsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDO1FBRWYsS0FBSyxFQUFFO1lBQ04sTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDO1NBQzlCO1FBRUQsT0FBTyxFQUFFO1lBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDO1NBQ2pDO0tBQ0QsQ0FBQztJQUVTLGdDQUFtQixHQUFHO1FBQ2hDLFFBQVE7UUFDUixLQUFLO1FBQ0wsS0FBSztRQUNMLE9BQU87UUFDUCxhQUFhO0tBQ2IsQ0FBQztJQUVTLGtCQUFLLEdBQWEsRUFBRSxDQUFDO0lBRWhDO1FBQ0MsSUFBSSxLQUFLLEdBQUcsYUFBQSxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFN0MsYUFBQSxL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LEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDekcsUUFBQSxZQUFZLEdBQUcsWUFBWSxDQUFDLE9BQU8sQ0FBUyxZQUFZLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxVQUFVLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFFdEgsUUFBUSxHQUFHO0lBQ1YsSUFBSSxFQUFFO1FBQ0wsR0FBRyxFQUFFLElBQUk7S0FDVDtDQUNELENBQUM7QUFFVyxRQUFBLGFBQWEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFTLFlBQVksQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUMxRyxRQUFBLGFBQWEsR0FBRyxZQUFZLENBQUMsT0FBTyxDQUFTLFlBQVksQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQztBQUV2SCxRQUFRLEdBQUc7SUFDVixJQUFJLEVBQUU7UUFDTCxPQUFPLEVBQUUsSUFBSTtLQUNiO0NBQ0QsQ0FBQztBQUVXLFFBQUEsV0FBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQVMsWUFBWSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3hHLFFBQUEsV0FBVyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQVMsWUFBWSxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBRXJILG1DQUFtQztBQUNuQyxrQkFBZSxJQUFJLENBQUM7QUFFcEIsNkVBQTZFO0FBQzdFLDZFQUE2RTtBQUM3RSw0RUFBNEU7QUFDNUUsNEVBQTRFIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDcmVhdGVkIGJ5IHVzZXIgb24gMjAxNy8xMi84LzAwOC5cbiAqL1xuXG5pbXBvcnQgKiBhcyBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJztcbmltcG9ydCAqIGFzIHV0aWwgZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IG5hbWVzcGFjZSBGdWxsSGFsZkNvcmVcbntcblx0ZXhwb3J0IGNvbnN0IEZVTExfV0lEVEggPSAxO1xuXHRleHBvcnQgY29uc3QgSEFMRl9XSURUSCA9IDA7XG5cblx0ZXhwb3J0IGNvbnN0IE5PX0VYSVNUID0gLTE7XG5cblx0ZXhwb3J0IGludGVyZmFjZSBJT3B0aW9uc1R5cGVcblx0e1xuXHRcdGVuZz86IGJvb2xlYW4sXG5cdFx0bnVtYmVyPzogYm9vbGVhbixcblxuXHRcdC8qKlxuXHRcdCAqIGVuZyAmIG51bWJlclxuXHRcdCAqL1xuXHRcdGJvdGg/OiBib29sZWFuO1xuXG5cdFx0c3BhY2U/OiBib29sZWFuO1xuXHRcdGV4aXN0cz86IGJvb2xlYW47XG5cblx0XHRkZWZhdWx0PzogYm9vbGVhbjtcblx0XHRub3RfZGVmYXVsdD86IGJvb2xlYW47XG5cdFx0bm90X2RlZmF1bHQyPzogYm9vbGVhbjtcblxuXHRcdHNsYXNoPzogYm9vbGVhbjtcblx0XHRicmFja2V0PzogYm9vbGVhbjtcblxuXHRcdFtpbmRleDogc3RyaW5nXTogYm9vbGVhbjtcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSU9wdGlvbnNcblx0e1xuXHRcdHR5cGU/OiBudW1iZXI7XG5cblx0XHRza2lwPzogSU9wdGlvbnNUeXBlO1xuXHRcdG9ubHk/OiBJT3B0aW9uc1R5cGU7XG5cblx0XHRtb2RlPzoge1xuXHRcdFx0b25seT86IGJvb2xlYW4sXG5cblx0XHRcdFtpbmRleDogc3RyaW5nXTogYm9vbGVhbjtcblx0XHR9O1xuXG5cdFx0cmV0dXJuVHlwZT86IG51bWJlcjtcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSVRhYmxlT2JqZWN0XG5cdHtcblx0XHRmcm9tPzogbnVtYmVyO1xuXHRcdHRvPzogbnVtYmVyO1xuXG5cdFx0dmFsdWVzPzogbnVtYmVyW107XG5cblx0XHRub3Q/OiBJVGFibGVPYmplY3RbXSxcblx0fVxuXG5cdGV4cG9ydCBpbnRlcmZhY2UgSVRhYmxlXG5cdHtcblx0XHRkZWZhdWx0PzogSVRhYmxlT2JqZWN0O1xuXG5cdFx0bnVtYmVyPzogSVRhYmxlT2JqZWN0O1xuXHRcdHNwYWNlPzogSVRhYmxlT2JqZWN0O1xuXG5cdFx0J0EtWic/OiBJVGFibGVPYmplY3Q7XG5cdFx0J2Eteic/OiBJVGFibGVPYmplY3Q7XG5cblx0XHRub3RfZGVmYXVsdD86IElUYWJsZU9iamVjdDtcblxuXHRcdFtpbmRleDogc3RyaW5nXTogSVRhYmxlT2JqZWN0O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29kZV9wYWdlXzQzN1xuXHQgKi9cblx0bGV0IF90YWJsZSA9IHtcblx0XHRkZWZhdWx0OiB7XG5cdFx0XHRmcm9tOiAweDAwMjAgKyAxLFxuXHRcdFx0dG86IDB4MDA3RiAtIDEsXG5cdFx0XHR2YWx1ZXM6IFsweDAwMjBdLFxuXHRcdH0sXG5cblx0XHRudW1iZXI6IFsweDAwMzAsIDB4MDAzOV0sXG5cblx0XHQnQS1aJzogWzB4MDA0MSwgMHgwMDVBXSxcblx0XHQnYS16JzogWzB4MDA2MSwgMHgwMDdBXSxcblxuXHRcdHNwYWNlOiBbMHgwMDIwXSxcblxuXHRcdHNsYXNoOiB7XG5cdFx0XHR2YWx1ZXM6IHV0aWwuY2hhckNvZGVBdChgL1xcXFxgKSxcblx0XHR9LFxuXG5cdFx0YnJhY2tldDoge1xuXHRcdFx0dmFsdWVzOiB1dGlsLmNoYXJDb2RlQXQoYCgpW117fWApLFxuXHRcdH0sXG5cdH07XG5cblx0ZXhwb3J0IGxldCB0YWJsZURlZmF1bHRJbmNsdWRlID0gW1xuXHRcdCdudW1iZXInLFxuXHRcdCdBLVonLFxuXHRcdCdhLXonLFxuXHRcdCdzcGFjZScsXG5cdFx0J25vdF9kZWZhdWx0Jyxcblx0XTtcblxuXHRleHBvcnQgbGV0IHRhYmxlOiBJVGFibGVbXSA9IFtdO1xuXG5cdHtcblx0XHRsZXQgX2tleXMgPSB0YWJsZURlZmF1bHRJbmNsdWRlLnNsaWNlKDAsIC0xKTtcblxuXHRcdHRhYmxlWzBdID0ge307XG5cdFx0dGFibGVbMV0gPSB7fTtcblxuXHRcdGZvciAobGV0IGsgaW4gX3RhYmxlKVxuXHRcdHtcblx0XHRcdGxldCB2ID0gX3RhYmxlW2tdO1xuXG5cdFx0XHRsZXQgcjtcblxuXHRcdFx0ciA9IGZuKHYpO1xuXG5cdFx0XHRpZiAocilcblx0XHRcdHtcblx0XHRcdFx0dGFibGVbSEFMRl9XSURUSF1ba10gPSByWzFdO1xuXHRcdFx0XHR0YWJsZVtGVUxMX1dJRFRIXVtrXSA9IHJbMF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bGV0IHIgPSBmbihfdGFibGUuZGVmYXVsdCk7XG5cblx0XHRyWzBdLm5vdCA9IFtdO1xuXHRcdHJbMV0ubm90ID0gW107XG5cblx0XHRmb3IgKGxldCBrIG9mIF9rZXlzKVxuXHRcdHtcblx0XHRcdGxldCB2ID0gX3RhYmxlW2tdO1xuXG5cdFx0XHRsZXQgcjI7XG5cblx0XHRcdHIyID0gZm4odik7XG5cblx0XHRcdGlmIChyMilcblx0XHRcdHtcblx0XHRcdFx0clswXS5ub3QucHVzaChyMlswXSk7XG5cdFx0XHRcdHJbMV0ubm90LnB1c2gocjJbMV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRhYmxlW0hBTEZfV0lEVEhdWydub3RfZGVmYXVsdCddID0gclsxXTtcblx0XHR0YWJsZVtGVUxMX1dJRFRIXVsnbm90X2RlZmF1bHQnXSA9IHJbMF07XG5cblx0XHQvL2NvbnNvbGUubG9nKHRhYmxlKTtcblxuXHRcdGZ1bmN0aW9uIGZuKHYpXG5cdFx0e1xuXHRcdFx0bGV0IHI6IElUYWJsZU9iamVjdFtdID0gW107XG5cblx0XHRcdHJbMF0gPSB7fTtcblx0XHRcdHJbMV0gPSB7fTtcblxuXHRcdFx0bGV0IF9za2lwID0gdHJ1ZTtcblxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodikpXG5cdFx0XHR7XG5cdFx0XHRcdGlmICh2Lmxlbmd0aCA9PSAyKVxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0clswXS5mcm9tID0gdlswXTtcblx0XHRcdFx0XHRyWzBdLnRvID0gdlsxXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyWzBdLnZhbHVlcyA9IHY7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRfc2tpcCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodi5mcm9tICYmIHYudG8pXG5cdFx0XHR7XG5cdFx0XHRcdHJbMF0uZnJvbSA9IHYuZnJvbTtcblx0XHRcdFx0clswXS50byA9IHYudG87XG5cblx0XHRcdFx0X3NraXAgPSBmYWxzZTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKEFycmF5LmlzQXJyYXkodi52YWx1ZXMpICYmIHYudmFsdWVzLmxlbmd0aClcblx0XHRcdHtcblx0XHRcdFx0clswXS52YWx1ZXMgPSB2LnZhbHVlcztcblxuXHRcdFx0XHRfc2tpcCA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX3NraXApXG5cdFx0XHR7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHJbMF0uZnJvbSAmJiByWzBdLnRvKVxuXHRcdFx0e1xuXHRcdFx0XHRyWzFdLmZyb20gPSB0b0Z1bGxXaWR0aChyWzBdLmZyb20pO1xuXHRcdFx0XHRyWzFdLnRvID0gdG9GdWxsV2lkdGgoclswXS50byk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChyWzBdLnZhbHVlcylcblx0XHRcdHtcblx0XHRcdFx0clsxXS52YWx1ZXMgPSAoclswXS52YWx1ZXMgYXMgbnVtYmVyW10pLnJlZHVjZShmdW5jdGlvbiAoYSwgY29kZSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGEucHVzaCh0b0Z1bGxXaWR0aChjb2RlKSk7XG5cblx0XHRcdFx0XHRyZXR1cm4gYTtcblx0XHRcdFx0fSwgW10pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcjtcblx0XHR9XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gZmlsdGVyVGFibGUoZGF0YSlcblx0e1xuXHRcdGxldCBfYSA9IFtdO1xuXG5cdFx0aWYgKGRhdGEuZnJvbSAmJiBkYXRhLnRvKVxuXHRcdHtcblx0XHRcdGZvciAobGV0IGkgPSBkYXRhLmZyb207IGk8PWRhdGEudG87IGkrKylcblx0XHRcdHtcblx0XHRcdFx0X2EucHVzaChpKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZGF0YS52YWx1ZXMpXG5cdFx0e1xuXHRcdFx0X2EgPSBfYS5jb25jYXQoZGF0YS52YWx1ZXMpXG5cdFx0fVxuXG5cdFx0aWYgKEFycmF5LmlzQXJyYXkoZGF0YS5ub3QpICYmIGRhdGEubm90Lmxlbmd0aClcblx0XHR7XG5cdFx0XHRfYSA9IF9hLmZpbHRlcihmdW5jdGlvbiAoY2hhckNvZGUpXG5cdFx0XHR7XG5cdFx0XHRcdGZvciAobGV0IGQgb2YgZGF0YS5ub3QpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAoX2Noa1R5cGUoY2hhckNvZGUsIGQpKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH0pO1xuXHRcdH1cblxuXHRcdHJldHVybiBfYTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBfY2hrVHlwZShjaGFyQ29kZTogbnVtYmVyLCBkYXRhOiBJVGFibGVPYmplY3QpXG5cdHtcblx0XHRpZiAoZGF0YS5mcm9tICYmIGRhdGEudG8gJiYgZGF0YS5mcm9tIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGRhdGEudG8pXG5cdFx0e1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGRhdGEudmFsdWVzICYmIGRhdGEudmFsdWVzLmluY2x1ZGVzKGNoYXJDb2RlKSlcblx0XHR7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gY2hrVHlwZShjaGFyQ29kZTogbnVtYmVyLCBrZXk6IHN0cmluZywgdHlwZTogbnVtYmVyKVxuXHR7XG5cdFx0bGV0IGRhdGEgPSB0YWJsZVt0eXBlXVtrZXldO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyhjaGFyQ29kZSwgZGF0YSk7XG5cblx0XHRpZiAoQXJyYXkuaXNBcnJheShkYXRhLm5vdCkgJiYgZGF0YS5ub3QubGVuZ3RoKVxuXHRcdHtcblx0XHRcdGZvciAobGV0IGQgb2YgZGF0YS5ub3QpXG5cdFx0XHR7XG5cdFx0XHRcdGlmIChfY2hrVHlwZShjaGFyQ29kZSwgZCkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoX2Noa1R5cGUoY2hhckNvZGUsIGRhdGEpKVxuXHRcdHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBoYXNGdWxsSGFsZihjaGFyQ29kZTogbnVtYmVyKVxuXHR7XG5cdFx0aWYgKDB4MDAyMCA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8IDB4MDA3Rilcblx0XHR7XG5cdFx0XHRyZXR1cm4gSEFMRl9XSURUSDtcblx0XHR9XG5cblx0XHRpZiAoMHgzMDAwID09PSBjaGFyQ29kZSB8fCAweEZGMDAgPCBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8IDB4RkY1Rilcblx0XHR7XG5cdFx0XHRyZXR1cm4gRlVMTF9XSURUSDtcblx0XHR9XG5cblx0XHRyZXR1cm4gTk9fRVhJU1Q7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gaXNGdWxsSGFsZihjaGFyQ29kZTogbnVtYmVyKVxuXHR7XG5cdFx0bGV0IHIgPSBoYXNGdWxsSGFsZihjaGFyQ29kZSk7XG5cblx0XHRpZiAociA9PT0gRlVMTF9XSURUSClcblx0XHR7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAociA9PT0gSEFMRl9XSURUSClcblx0XHR7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHRcdGVsc2Vcblx0XHR7XG5cdFx0XHQvLyBAdG9kbyBhZGQgbW9yZS4uLlxuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0ZXhwb3J0IGZ1bmN0aW9uIHRvRnVsbFdpZHRoKGNoYXJDb2RlOiBudW1iZXIpXG5cdHtcblx0XHRpZiAoMHgwMDIwIDwgY2hhckNvZGUgJiYgY2hhckNvZGUgPCAweDAwN0YpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIDB4RkYwMCArIChjaGFyQ29kZSAtIDB4MDAyMCk7XG5cdFx0fVxuXG5cdFx0aWYgKDB4MDAyMCA9PT0gY2hhckNvZGUpXG5cdFx0e1xuXHRcdFx0cmV0dXJuIDB4MzAwMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY2hhckNvZGU7XG5cdH1cblxuXHRleHBvcnQgZnVuY3Rpb24gdG9IYWxmV2lkdGgoY2hhckNvZGU6IG51bWJlcilcblx0e1xuXHRcdGlmICgweEZGMDAgPCBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8IDB4RkY1Rilcblx0XHR7XG5cdFx0XHRyZXR1cm4gMHgwMDIwICsgKGNoYXJDb2RlIC0gMHhGRjAwKTtcblx0XHR9XG5cblx0XHRpZiAoMHgzMDAwID09PSBjaGFyQ29kZSlcblx0XHR7XG5cdFx0XHRyZXR1cm4gMHgwMDIwO1xuXHRcdH1cblxuXHRcdHJldHVybiBjaGFyQ29kZTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBfb3B0aW9uc1R5cGUoZGF0YTogSU9wdGlvbnNUeXBlKVxuXHR7XG5cdFx0aWYgKGRhdGEpXG5cdFx0e1xuXHRcdFx0aWYgKHR5cGVvZiBkYXRhLmV4aXN0cyA9PSAnYm9vbGVhbicpXG5cdFx0XHR7XG5cdFx0XHRcdGZvciAobGV0IGtleSBpbiB0YWJsZVswXSlcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGlmIChrZXkuaW5kZXhPZignZGVmYXVsdCcpID09IDApXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKGRhdGFba2V5XSAhPT0gZmFsc2UpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0ZGF0YVtrZXldID0gZGF0YS5leGlzdHM7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGRhdGEuZXhpc3RzO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZVxuXHRcdFx0e1xuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGEuZGVmYXVsdCA9PSAnYm9vbGVhbicpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRmb3IgKGxldCBrZXkgb2YgdGFibGVEZWZhdWx0SW5jbHVkZSlcblx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YVtrZXldICE9PSBmYWxzZSlcblx0XHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdFx0ZGF0YVtrZXldID0gZGF0YS5kZWZhdWx0O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGRlbGV0ZSBkYXRhLmRlZmF1bHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGEubm90X2RlZmF1bHQyID09ICdib29sZWFuJylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRhdGEuYm90aCA9IGRhdGEuc3BhY2UgPSBkYXRhLm5vdF9kZWZhdWx0Mjtcblx0XHRcdFx0XHRkZWxldGUgZGF0YS5ub3RfZGVmYXVsdDI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGEuYm90aCA9PSAnYm9vbGVhbicpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRkYXRhLm51bWJlciA9IGRhdGEuZW5nID0gZGF0YS5ib3RoO1xuXHRcdFx0XHRcdGRlbGV0ZSBkYXRhLmJvdGg7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAodHlwZW9mIGRhdGEuZW5nID09ICdib29sZWFuJylcblx0XHRcdFx0e1xuXHRcdFx0XHRcdGRhdGFbJ2EteiddID0gZGF0YVsnQS1aJ10gPSBkYXRhLmVuZztcblx0XHRcdFx0XHRkZWxldGUgZGF0YS5lbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzPFQsIFUgPSBzdHJpbmc+KHN0ciwgY2hhclByb2Nlc3MsIG9wdGlvbnM6IElPcHRpb25zKVxuXHR7XG5cdFx0bGV0IHJldDogbnVtYmVyW10gPSBbXTtcblxuXHRcdG9wdGlvbnMuc2tpcCA9IF9vcHRpb25zVHlwZShvcHRpb25zLnNraXApO1xuXHRcdG9wdGlvbnMub25seSA9IF9vcHRpb25zVHlwZShvcHRpb25zLm9ubHkpO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyhvcHRpb25zKTtcblxuXHRcdGxldCBfc3RyID0gQXJyYXkuaXNBcnJheShzdHIpID8gc3RyIDogc3RyLnRvU3RyaW5nKCk7XG5cblx0XHRmb3IgKGxldCBjaGFyIG9mIF9zdHIpXG5cdFx0e1xuXHRcdFx0bGV0IF9za2lwOiBib29sZWFuO1xuXG5cdFx0XHQvLyBAdHMtaWdub3JlXG5cdFx0XHRsZXQgY2hhckNvZGUgPSB0eXBlb2YgY2hhciA9PSAnbnVtYmVyJyA/IGNoYXIgOiBjaGFyLmNoYXJDb2RlQXQoKTtcblxuXHRcdFx0aWYgKG9wdGlvbnMub25seSlcblx0XHRcdHtcblx0XHRcdFx0X3NraXAgPSB0cnVlO1xuXG5cdFx0XHRcdGZvciAobGV0IGtleSBpbiBvcHRpb25zLm9ubHkpXG5cdFx0XHRcdHtcblx0XHRcdFx0XHQvL2NvbnNvbGUubG9nKGNoYXIsIGNoYXJDb2RlLCBba2V5XSwgY2hrVHlwZShjaGFyQ29kZSwga2V5LCBvcHRpb25zLnR5cGUpKTtcblxuXHRcdFx0XHRcdGlmIChvcHRpb25zLm9ubHlba2V5XSAmJiBjaGtUeXBlKGNoYXJDb2RlLCBrZXksIG9wdGlvbnMudHlwZSkpXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0X3NraXAgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vY29uc29sZS5sb2coY2hhciwgY2hhckNvZGUsIF9za2lwKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCFfc2tpcCAmJiBvcHRpb25zLnNraXApXG5cdFx0XHR7XG5cdFx0XHRcdGZvciAobGV0IGtleSBpbiBvcHRpb25zLnNraXApXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRpZiAob3B0aW9ucy5za2lwW2tleV0gJiYgY2hrVHlwZShjaGFyQ29kZSwga2V5LCBvcHRpb25zLnR5cGUpKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdF9za2lwID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoX3NraXApXG5cdFx0XHR7XG5cdFx0XHRcdHJldC5wdXNoKGNoYXJDb2RlKTtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHJldC5wdXNoKGNoYXJQcm9jZXNzKGNoYXJDb2RlKSk7XG5cdFx0fVxuXG5cdFx0aWYgKG9wdGlvbnMucmV0dXJuVHlwZSlcblx0XHR7XG5cdFx0XHRyZXR1cm4gcmV0IGFzIG51bWJlcltdO1xuXHRcdH1cblxuXHRcdHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgcmV0KTtcblx0fVxuXG5cdGV4cG9ydCBmdW5jdGlvbiBmYWN0b3J5PFQgPSBzdHJpbmc+KGNoYXJQcm9jZXNzb3IsIHR5cGU6IG51bWJlciwgb3ZlcndyaXRlT3B0aW9ucz86IElPcHRpb25zKTogSUZhY3RvcnlGblxuXHR7XG5cdFx0Ly9jb25zdCBkZWVwbWVyZ2UgPSByZXF1aXJlKCdkZWVwbWVyZ2UnKTtcblxuXHRcdHJldHVybiAoc3RyLCBvcHRpb25zPzogSU9wdGlvbnMpID0+XG5cdFx0e1xuXHRcdFx0b3B0aW9ucyA9IGRlZXBtZXJnZS5hbGwoW1xuXHRcdFx0XHR7XG5cdFx0XHRcdFx0Ly9za2lwOiB7fSxcblx0XHRcdFx0fSwgb3B0aW9ucyB8fCB7fSwgb3ZlcndyaXRlT3B0aW9ucyB8fCB7fSwge1xuXHRcdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdH0sXG5cdFx0XHRdKTtcblxuXHRcdFx0Ly9jb25zb2xlLmxvZyhvcHRpb25zKTtcblxuXHRcdFx0cmV0dXJuIHByb2Nlc3M8VD4oc3RyLCBjaGFyUHJvY2Vzc29yLCBvcHRpb25zKTtcblx0XHR9O1xuXHR9XG5cblx0ZXhwb3J0IGludGVyZmFjZSBJRmFjdG9yeUZuXG5cdHtcblx0XHQoc3RyOiBzdHJpbmcsIG9wdGlvbnM/OiBJT3B0aW9ucyk6IHN0cmluZ1xuXHRcdChzdHI6IG51bWJlciwgb3B0aW9ucz86IElPcHRpb25zKTogc3RyaW5nXG5cdFx0KHN0ciwgb3B0aW9ucz86IElPcHRpb25zKVxuXHR9XG59XG5cbmxldCB0eXBlT25seTogRnVsbEhhbGZDb3JlLklPcHRpb25zID0ge1xuXHRvbmx5OiB7XG5cdFx0bnVtYmVyOiB0cnVlLFxuXHR9LFxufTtcblxuZXhwb3J0IGNvbnN0IHRvRnVsbE51bWJlciA9IEZ1bGxIYWxmQ29yZS5mYWN0b3J5PHN0cmluZz4oRnVsbEhhbGZDb3JlLnRvRnVsbFdpZHRoLCBGdWxsSGFsZkNvcmUuRlVMTF9XSURUSCwgdHlwZU9ubHkpO1xuZXhwb3J0IGNvbnN0IHRvSGFsZk51bWJlciA9IEZ1bGxIYWxmQ29yZS5mYWN0b3J5PHN0cmluZz4oRnVsbEhhbGZDb3JlLnRvSGFsZldpZHRoLCBGdWxsSGFsZkNvcmUuSEFMRl9XSURUSCwgdHlwZU9ubHkpO1xuXG50eXBlT25seSA9IHtcblx0b25seToge1xuXHRcdGVuZzogdHJ1ZSxcblx0fSxcbn07XG5cbmV4cG9ydCBjb25zdCB0b0Z1bGxFbmdsaXNoID0gRnVsbEhhbGZDb3JlLmZhY3Rvcnk8c3RyaW5nPihGdWxsSGFsZkNvcmUudG9GdWxsV2lkdGgsIEZ1bGxIYWxmQ29yZS5GVUxMX1dJRFRILCB0eXBlT25seSk7XG5leHBvcnQgY29uc3QgdG9IYWxmRW5nbGlzaCA9IEZ1bGxIYWxmQ29yZS5mYWN0b3J5PHN0cmluZz4oRnVsbEhhbGZDb3JlLnRvSGFsZldpZHRoLCBGdWxsSGFsZkNvcmUuSEFMRl9XSURUSCwgdHlwZU9ubHkpO1xuXG50eXBlT25seSA9IHtcblx0b25seToge1xuXHRcdGRlZmF1bHQ6IHRydWUsXG5cdH0sXG59O1xuXG5leHBvcnQgY29uc3QgdG9GdWxsV2lkdGggPSBGdWxsSGFsZkNvcmUuZmFjdG9yeTxzdHJpbmc+KEZ1bGxIYWxmQ29yZS50b0Z1bGxXaWR0aCwgRnVsbEhhbGZDb3JlLkZVTExfV0lEVEgsIHR5cGVPbmx5KTtcbmV4cG9ydCBjb25zdCB0b0hhbGZXaWR0aCA9IEZ1bGxIYWxmQ29yZS5mYWN0b3J5PHN0cmluZz4oRnVsbEhhbGZDb3JlLnRvSGFsZldpZHRoLCBGdWxsSGFsZkNvcmUuSEFMRl9XSURUSCwgdHlwZU9ubHkpO1xuXG5pbXBvcnQgKiBhcyBzZWxmIGZyb20gJy4vZnVsbGhhbGYnO1xuZXhwb3J0IGRlZmF1bHQgc2VsZjtcblxuLy9jb25zb2xlLmxvZyh0b0Z1bGxFbmdsaXNoKCcxMjNhYmNBQkPvvKHvvKLvvKPvvJHvvJLvvJPvvI/vvIrvvI3vvIvvvJ3vvI3vvJDvvL3vvLvigJnvvJvvvI/vvI4rLSovPS0wOV1bXFwnXCI7Ly4nKSk7XG4vL2NvbnNvbGUubG9nKHRvSGFsZkVuZ2xpc2goJzEyM2FiY0FCQ++8oe+8ou+8o++8ke+8ku+8k++8j++8iu+8je+8i++8ne+8je+8kO+8ve+8u+KAme+8m++8j++8jistKi89LTA5XVtcXCdcIjsvLicpKTtcbi8vY29uc29sZS5sb2codG9GdWxsTnVtYmVyKCcxMjNhYmNBQkPvvKHvvKLvvKPvvJHvvJLvvJPvvI/vvIrvvI3vvIvvvJ3vvI3vvJDvvL3vvLvigJnvvJvvvI/vvI4rLSovPS0wOV1bXFwnXCI7Ly4nKSk7XG4vL2NvbnNvbGUubG9nKHRvSGFsZk51bWJlcignMTIzYWJjQUJD77yh77yi77yj77yR77yS77yT77yP77yK77yN77yL77yd77yN77yQ77y977y74oCZ77yb77yP77yOKy0qLz0tMDldW1xcJ1wiOy8uJykpO1xuIl19
/**
 * Created by user on 2019/8/12.
 */

import * as reSource from './src/re';
import regexpClassToObject from 'regexp-class-to-regenerate';
import fs from 'fs-extra';
import path from 'path';

let data = Object.entries(reSource)
.reduce((a, [k, v]: [keyof typeof reSource, RegExp]) => {

	if (v instanceof RegExp)
	{
		try
		{
			a[k] = regexpClassToObject(v).toRegExp();
		}
		catch (e)
		{
			console.warn({
				k,
				v,
				message: e.message,
			});

			a[k] = v;
		}
	}

	return a
}, {} as Record<keyof typeof reSource, RegExp>);

let txt = Object.entries(data)
.map(([k, v]: [keyof typeof reSource, RegExp]) => {
	return `export const ${k} = ${v.toString()};`;
}).join('\n\n');

let notice = `/**
 * do not edit this file
 * source file at test/scripts/src
 */`;

fs.outputFileSync(path.join(__dirname, '../..', 'lib', 're.ts'), `${notice}\n\n${txt}\n\n`);

